// Generated by CoffeeScript 1.10.0

/*
  * Copyright 2016 IBM Corp.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
 */

(function() {
  var mustache, rest;

  rest = require('rest');

  mustache = require('mustache');

  module.exports = function(RED) {
    "use strict";
    var GremlinQueryNode, TinkerpopConfigNode;
    GremlinQueryNode = function(n) {
      var isTemplated, node, script;
      RED.nodes.createNode(this, n);
      script = n.gremlin;
      isTemplated = (script || "").indexOf("{{") !== -1;
      this.gremlin = n.gremlin;
      this.database = RED.nodes.getNode(n.database);
      node = this;
      return this.on('input', function(msg) {
        node.status({
          fill: "blue",
          shape: "dot",
          text: "Requesting"
        });
        if (isTemplated) {
          script = mustache.render(script, msg);
        }
        return rest('http://' + this.database.server + ':' + this.database.port + '/?gremlin=' + script).then(function(response) {
          var json;
          console.log(response.entity);
          json = JSON.parse(response.entity);
          if (json.message === void 0) {
            if (json.status.code = 200) {
              msg.status = 'OK';
              node.status({
                fill: "green",
                shape: "dot",
                text: "Successful"
              });
            } else {
              msg.status = 'ERROR';
              node.status({
                fill: "red",
                shape: "dot",
                text: "Error"
              });
            }
            msg.status = json.status;
            if (json.result.data.length === 1) {
              msg.payload = json.result.data[0];
            } else {
              msg.payload = json.result.data;
            }
          } else {
            node.status({
              fill: "red",
              shape: "dot",
              text: "Error"
            });
            msg.status = 'ERROR';
            msg.payload = json.message;
          }
          return node.send(msg);
        });
      });
    };
    RED.nodes.registerType('gremlin-query', GremlinQueryNode);
    TinkerpopConfigNode = function(n) {
      RED.nodes.createNode(this, n);
      this.server = n.server;
      return this.port = n.port;
    };
    return RED.nodes.registerType('tinkerpop-config', TinkerpopConfigNode);
  };

}).call(this);

//# sourceMappingURL=tinkerpopNodes.js.map
